#!/bin/bash
# Title:        install-web2py.sh
# Description:  Installs web2py in the projects directory.    
# Author:       matthew
# Reference:    http://timmurphy.org/2010/05/19/checking-for-empty-string-in-bash/ 
#

################################################################################
# Files & locations  
################################################################################

FILENAME="web2py_src.zip"
FILESRC="http://www.web2py.com/examples/static/$FILENAME"

DOWNLOADS=$HOME/dev/downloads

SEP="################################################################################"

################################################################################
# Helper functions 
################################################################################

# Prints the given error message and exits.
function errorMessage() {
    echo -e "Error: $1. Type '`basename $0` -h' for usage and options."
    exit 1
}

# Prints the given warning message and exits.
function warningMessage() {
    echo -e "Warning: $1."
    exit 2
}

# Prints this script's usage and exists. 
function outputUsage() {
    echo "Usage: `basename $0` PROJECTNAME [options...]"
    echo "Options:"
    echo "  -h/--help     Prints this message"
    echo "  -d/--dst      Specifies destination folder"
    echo "  -f/--force    Forces fresh download of web2py source"
    echo 
    
    # TODO: Add help messages for your options here. 
    
    exit 1
}

# Archives existing web2py applications. 
function archiveApps() {
	echo "Not implemented!"
	exit 3
}

function createProjStructure() {	
	# A "best practice" .gitignore file that ignores tmp files, 
	# build artifacts, etc.

	# Ignore these file types. 
	echo -e "*~\ntmp*\n*.tmp\n*.bak\n*.pyc\n*.log\n" > .gitignore
	
	# Build and Sass artifacts
	echo -e "# Build artifacts\n$SEP" >> .gitignore
	echo -e "nosetests.xml\ncoverage.xml\n.coverage\n*.cover" >> .gitignore
	echo -e ".figleaf\nreport.html\npyccuracy_report.html\n" >> .gitignore 
	
	echo -e "# Sass artifacts\n$SEP" >> .gitignore
	echo -e ".sass-cache/\n" >> .gitignore
	echo -e "# System artifacts\n$SEP" >> .gitignore
	echo -e "PIL.pth\n" >> .gitignore  
	
	# Web2py artifacts
	echo -e "# Web2py artifacts\n$SEP" >> .gitignore
	
	# Apps
	echo -e "# Default apps" >> .gitignore
	echo -e "admin/" >> .gitignore
	echo -e "examples/" >> .gitignore
	echo -e "welcome/" >> .gitignore
	
	# Sessions, uploads, etc. 
	echo -e "\n# Non-code" >> .gitignore
	echo -e "sessions/" >> .gitignore
	echo -e "uploads/" >> .gitignore
	echo -e "databases/" >> .gitignore
	echo -e "errors/" >> .gitignore
	echo -e "httpserver.pid/" >> .gitignore
	
	# Create a directory for project documentation. 
	mkdir -p docs/api
	echo -e "Documentation generated by Sphinx or Epydoc should go here.\n" > docs/api/README
	echo -e "DO NOT DELETE. Empty directories are not committed to version control. This README file servers as a placeholder so that your CI tool (e.g., Jenkins) will commit this directory to its repository." >> docs/api/README
	
	# Save continuous integration files here (e.g., Jenkin's config.xml). 
	mkdir -p scripts/ci 
	
	# Any configuration of paths, etc. 
	mkdir config
	
	# Create a directory for tests. 
	mkdir -p test/unit
	cd test
	mkdir mocks
	mkdir fixtures
	mkdir functional
	mkdir acceptance
}

################################################################################
# Installation functions 
################################################################################

# Installs packages and sets up directories and files. 
function installPackages() { 
    #echo "Creating project '$PROJ_NAME' in directory '$PROJ_HOME'..."
    
    mkdir -p $DOWNLOADS
    
    cd $PROJ_HOME
    
    # TODO: Check for directory's existence. If it exists, archive the 
    # applications directory and app.yaml file. 

	# Check to see if the project already exists. If it does, upgrade. 
	# http://www.web2py.com/books/default/chapter/29/14#Upgrading 
	if [ -d $PROJ_NAME ]; then
	    read -p "This project already exists. Upgrade web2py (y/n)? "
	    
	    # Convert response to lower case. 
		# http://stackoverflow.com/a/2264537/154065 
	    UPGRADE=${REPLY,,}
	    
	    # If the user does not want to upgrade, exit. 
	    if [ "$UPGRADE" != "y" ] && [ "$UPGRADE" != "yes" ]; then
	    	echo "Finished without upgrade."
	    	exit 0
		fi
	fi

    # Get the file if it isn't yet downloaded (or if we're forced to).  
    if [ $FORCE ] || [ $UPGRADE ] || [ ! -e $DOWNLOADS/$FILENAME ]; then
    	echo "Downloading '$FILENAME' to '$DOWNLOADS'..."
    	# -P also works for establishing a "directory-prefix" for wget, 
		# explicit file naming seemed to work better. 
    	wget $FILESRC -O $DOWNLOADS/$FILENAME 
        echo "Done."
    fi 
    
    PROJ_DIR="$PROJ_NAME/project"
    echo "Updating the project and its 'src' directory at '$PROJ_HOME/$PROJ_DIR'..."
    mkdir -p $PROJ_DIR/src
    cd $PROJ_DIR
    echo "Done."
    
    echo "Unzipping web2py source..."
    unzip -qo $DOWNLOADS/$FILENAME -d src
    #mv web2py src
    echo "Done."
    
    if [ -z $UPGRADE ]; then
	    # Generate the rest of the standard project structure. 
		echo "Creating the project structure..."
		createProjStructure
	    echo "Done."
	fi
    
    echo "Finished. Project located at '$PROJ_HOME/$PROJ_NAME'."
    
    exit 0
}

# Removes packages installed and tears down any directories and files created. 
function removePackages() {
    # TODO: Write a tear down function.
    #echo "Removing `basename $0` tools & libraries..." 
    
    # TODO: Archive the applications folder first!
     
    echo "Function not implemented! Nothing was done!"
    #echo "Done." 
    
    exit 0
}

################################################################################
# Command line processing
################################################################################

# Parse the command line arguments. 
while [ "$#" -gt "0" ]; do
    case "$1" in
        -d|--dst)
            shift 1 # eat the '-d' or '--dst'
            PROJ_HOME="$1" # assign the next arg as this variable 
            shift 1 # eat the arg you just assigned
            ;;
        -f|--force) 
        	# Force download of the web2py src, even if we have a copy. 
            shift 1
            FORCE=1
            ;;
        -r|--remove)
            shift 1
            removePackages
            ;;
        -h|--help) 
            outputUsage
            ;;
        -*|--*)
            errorMessage "Unknown option $1"
            ;;
        *)
            #errorMessage "Unknown parameter $1"
			PROJ_NAME="$1"
			shift 1
            ;;
    esac
done

# Check for a project name, which is required. 
if [ -z $PROJ_NAME ]; then
    errorMessage "Project name required"
fi
 
# If a directory wasn't specified in the arguments... 
if [ -z $PROJ_HOME ]; then
	# Look for the projects directory. If that's not found...
	PROJ_HOME=`echo $WORKON_HOME`
	if [ -z $PROJ_HOME ]; then
		# Use the current directory. 
    	export PROJ_HOME=`pwd`
    	echo "Cannot find the $WORKON_HOME directory. Using the working directory instead."
	fi
else 
	# Verify that the given project directory exists. 
	if [ ! -d $PROJ_HOME ]; then
		errorMessage "This directory doesn't exist: '$PROJ_HOME'. Please specify another"
	fi
fi

################################################################################
# Main
################################################################################

installPackages 
 