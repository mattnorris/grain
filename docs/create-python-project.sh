#!/bin/bash
# Title:        create-python-project.sh
# Description:  Creates a new Python web project using virtualenv.  
# Author:       matthew
# Reference:    http://pypi.python.org/pypi/virtualenv
#               http://forums.fedoraforum.org/showthread.php?t=225470
#

################################################################################
# Helper functions 
################################################################################

# Prints the given error message and exits.
function errorMessage() {
    echo -e "Error: $1. Type '`basename $0` -h' for usage and options."
    exit 1
}

# Prints the given warning message and exits.
function warningMessage() {
    echo -e "Warning: $1."
    exit 2
}

# Prints this script's usage and exists. 
function outputUsage() {
    echo "Usage: `basename $0` [options...]"
    echo "Options:"
    echo "  -h/--help       Prints this message"
    
    # TODO: Add help messages for your options here. 
    
    exit 1
}

################################################################################
# Post-hook function
################################################################################

function postmkvirtualenv() {
	SITE_PKGS="lib/python2.5/site-packages" # relative path to site pacakges for easy_install
	SEP="################################################################################"
	
	cdvirtualenv

	echo "Creating the project's directory structure..."
	
	# The "project" directory is the heart of the app. This is where all 
	# source code, project documents, and scripts will go.  
	mkdir -p project/src
	cd project
	
	# A "best practice" .gitignore file that ignores tmp files, 
	# build artifacts, etc. 
	echo -e "*~\ntmp*\n*.tmp\n*.bak\n*.pyc\n\n" > .gitgignore
	echo -e "# Build artifacts\n$SEP\n" >> .gitignore
	echo -e "nosetests.xml\ncoverage.xml\n.coverage\n*.cover\n" >> .gitignore
	echo -e ".figleaf\nreport.html\npyccuracy_report.html\n\n" >> .gitignore 
	echo -e "# Sass artifacts\n$SEP\n" >> .gitignore
	echo -e ".sass-cache/\n\n" >> .gitignore
	echo -e "# System artifacts\n$SEP\n" >> .gitignore
	echo -e "PIL.pth\n" >> .gitignore  
	
	# Create a directory for project documentation. 
	mkdir -p docs/api
	echo -e "Documentation generated by Sphinx or Epydoc should go here.\n\n" > docs/api/README
	echo "DO NOT DELETE. Empty directories are not committed to version control. This README file servers as a placeholder so that your CI tool (e.g., Jenkins) will commit this directory to its repository." >> docs/api/README
	
	# Save continuous integration files here (e.g., Jenkin's config.xml). 
	mkdir -p scripts/ci 
	
	# Any configuration of paths, etc. 
	mkdir config
	# Generate a path to use for any "module not found" PIL errors. 
	# http://stackoverflow.com/questions/2813742
	echo "Generating PIL.pth..."
	echo "`pwd`/$SITE_PKGS" > config/PIL.pth
	
	# Create a directory for tests. 
	mkdir -p test/unit
	cd test
	mkdir mocks
	mkdir fixtures
	mkdir functional
	mkdir acceptance
	
	echo "Done."
	exit 1
}

################################################################################
# Command line processing
################################################################################

# Check for a language option, which is required. 
if [ $# -lt 1 ]; then
    errorMessage "No project name given"
else
    PROJECT_NAME="$1"
    shift
fi

# Parse the command line arguments. 
while [ "$#" -gt "0" ]; do
    case "$1" in
     
    #   TODO:    Create some script options. 
    #   EXAMPLE: Uncomment below to assign a 'destination directory', DST_DIR, 
    #            to the arg given after a '-d' or '--dst' on the command line.
    # 
    #   -d|--dst)
    #       shift 1 # eat the '-d' or '--dst'
    #       DST_DIR="$1" # assign the next arg as this variable 
    #       shift 1 # eat the arg you just assigned
    #       ;;
        -h|--help)
            outputUsage
            ;;
        -*|--*)
            errorMessage "Unknown option $1"
            ;;
        *)
            errorMessage "Unknown parameter $1"
            ;;
    esac
done

################################################################################
# Main
################################################################################

echo "This script will not work. Use its contents for postmkvirtualenv instead."
exit 1

echo "Creating the environment for $PROJECT_NAME..."
# Make the virtual environment. 
# TODO: This does NOT work: "command not found: mkvirtualenv"
mkvirtualenv --no-site-packages -p python2.5 "$PROJECT_NAME"
echo $?
exit 3

postmkvirtualenv
