"""Creates a new Python web project using virtualenv."""

import virtualenv
import subprocess
import os
import string

# http://mindtrove.info/virtualenv-bootstrapping/

__author__ = "Matthew Norris"
__copyright__ = "Copyright 2011, Matthew Norris"

install_path = os.environ['WORKON_HOME'] or os.getcwd()

GITIGNORE = """*~
tmp*
*.tmp
*.bak
*.pyc

# Build artifacts
#################
nosetests.xml
coverage.xml
.coverage
*.cover
.figleaf
report.html
pyccuracy_report.html

# Sass artifacts
################
.sass-cache/

# System artifacts
##################
PIL.pth
"""

PLACEHOLDER = """Documentation generated by Sphinx or Epydoc should go here.

DO NOT DELETE. Empty directories are not committed to version control. 
This README file servers as a placeholder so that your CI tool (e.g., Jenkins) 
will commit this directory to its repository.
"""

SITE_PKGS = "lib/python2.5/site-packages"

def after_install(options, home_dir): 
    """
    After creating the virtual environment, create the default project 
    structure, complete with initial "best practice" files. 
    """
    print 'Environment created. Creating project\'s directory structure...'
    env_path = os.path.abspath(home_dir)
    os.chdir(env_path)
    # The "project" directory is the heart of the app. This is where all 
    # source code, project documents, and scripts will go. 
    os.makedirs('project/src')
    os.chdir('project')
    # A "best practice" .gitignore file that ignores tmp files, 
    # build artifacts, etc.
    open('.gitignore', 'w').write(GITIGNORE)
    # Create directory for project documentation. 
    os.makedirs('docs/api')
    os.chdir('docs/api')
    open('README', 'w').write(PLACEHOLDER)
    # Save continuous integration files here (e.g., Jenkin's config.xml). 
    os.chdir('../..')
    os.makedirs('scripts/ci')
    # Any configuration of paths, etc. 
    os.mkdir('config')
    # Generate a path to use for any "module not found" PIL errors. 
    # http://stackoverflow.com/questions/2813742
    print 'Generating PIL.pth...'
    open('config/PIL.pth', 'w').write(os.path.join(env_path, SITE_PKGS))
    # Create a directory for tests. 
    os.makedirs('test/unit')
    os.chdir('test')
    os.mkdir('fixtures')
    os.mkdir('mocks')
    os.mkdir('functional')
    os.mkdir('acceptance')
    
    print 'Done.'
    print 'Installing packages...'
    subprocess.call([string.join(home_dir, 'bin', 'easy_install'),
                     'lxml'])
    print 'Done.'
virtualenv.after_install = after_install

print virtualenv.after_install

def adjust_options(options, args): 
    """
    Adjusts options to use Python 2.5 and exclude site packages.
    """
    options.python = 'python2.5'
    options.no_site_packages = True    
virtualenv.adjust_options = adjust_options

print virtualenv.adjust_options

if __name__ == '__main__': 
    print 'This script is not fully functional. No post hooks will be called.'
    virtualenv.main()
    