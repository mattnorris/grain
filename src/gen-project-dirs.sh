#!/bin/bash
# Title:        gen-project-dirs.sh
# Description:  Generates a directory structure for projects, modeled after 
#               observations from virtualenv folders and others. 
# Author:       Matthew Norris
# Reference:    Rationale - http://docs.wraithmonster.com/directory-structure
#               http://timmurphy.org/2010/05/19/checking-for-empty-string-in-bash/
#               http://stackoverflow.com/questions/229551/string-contains-in-bash
#               http://stackoverflow.com/a/5701853/154065
#               http://linuxcommand.org/wss0110.php
#               http://www.thegeekstuff.com/2010/06/bash-array-tutorial/
#               http://www.thegeekstuff.com/2010/07/bash-string-manipulation/
#

################################################################################
# File & directory locations  
################################################################################

DST_DIR=.
README="README.md"

################################################################################
# Helper functions 
################################################################################

# Prints the given error message and exits.
function errorMessage() {
    echo -e "Error: $1. Type '`basename $0` -h' for usage and options."
    exit 1
}

# Prints the given warning message and exits.
function warningMessage() {
    echo -e "Warning: $1."
    exit 2
}

# Prints this script's usage and exists. 
function outputUsage() {
    echo "Usage: `basename $0` [options...]"
    echo "Options:"
    echo "  -h/--help     Prints this message"
    echo "  -n/--name     Specify the project name"
    echo "  -d/--dst      Specify a project directory"
    
    exit 1
}

################################################################################
# Installation functions 
################################################################################

# Generates the appropriate directories. 
function genDirs() {

    cd $DST_DIR

    # If a project name was given, create that parent directory first. 
    if [ -n "$PROJ_NAME" ]; then
        mkdir $PROJ_NAME
        cd $PROJ_NAME
    fi
    
    echo "Creating the project's directory structure and files..."

    # The "project" directory is the heart of the app. This is where all 
    # source code, project documents, and scripts will go.  
    mkdir -p project/src
    cd project

    # A "best practice" .gitignore file that ignores tmp files, 
    # build artifacts, etc.
    echo -e "*~\ntmp*\n*.tmp\n*.bak\n*.pyc\n" > .gitignore
    echo -e "# Build artifacts\n$SEP" >> .gitignore
    echo -e "nosetests.xml\ncoverage.xml\n.coverage\n*.cover" >> .gitignore
    echo -e ".figleaf\nreport.html\npyccuracy_report.html\n" >> .gitignore 
    echo -e "# Sass artifacts\n$SEP" >> .gitignore
    echo -e ".sass-cache/\n" >> .gitignore
    echo -e "# System artifacts\n$SEP" >> .gitignore
    echo -e "PIL.pth\n" >> .gitignore 
    
    # Create a README file for the project. 
    echo -e "This directory contains the release of this project.\n" > $README

    # Create a directory for project documentation. 
    mkdir -p docs/api
    echo -e "Documentation generated by Sphinx or Epydoc should go here.\n\n" > docs/api/README
    echo "DO NOT DELETE. Empty directories are not committed to version control. This README file servers as a placeholder so that your CI tool (e.g., Jenkins) will commit this directory to its repository." >> docs/api/README

    # Save continuous integration files here (e.g., Jenkin's config.xml). 
    mkdir -p scripts/ci 

    # Any configuration of paths, etc. 
    mkdir config
    # Generate a path to use for any "module not found" PIL errors. 
    # http://stackoverflow.com/questions/2813742
    echo "`pwd`/$SITE_PKGS" > config/PIL.pth

    # Create a directory for tests. 
    mkdir -p test/unit
    cd test
    mkdir mocks
    mkdir fixtures
    mkdir functional
    mkdir acceptance

    echo "Done."
}

################################################################################
# Command line processing
################################################################################

# Parse the command line arguments. 
while [ "$#" -gt "0" ]; do
    case "$1" in 
        -d|--dst)
            shift 1 # eat the '-d' or '--dst'
            DST_DIR="$1" # assign the next arg as this variable 
            shift 1 # eat the arg you just assigned
            ;;
        -n|--name)
            shift 1
            PROJ_NAME="$1"
            shift 1
            ;;
        -r|--remove)
            shift 1
            removePackages
            ;;
        -h|--help)
            outputUsage
            ;;
        -*|--*)
            errorMessage "Unknown option $1"
            ;;
        *)
            errorMessage "Unknown parameter $1"
            ;;
    esac
done

################################################################################
# Main
################################################################################

genDirs

